import { Injectable } from '@nestjs/common';
import { SupabaseClient } from '@supabase/supabase-js';
import { supabaseService } from '../db/supabase';
import { LineHelper, LineMessage } from '../common/line';
import { config } from '../common/config';

interface LineEvent {
  type: string;
  source: {
    type: string;
    userId: string;
  };
  replyToken?: string;
  message?: {
    type: string;
    text: string;
  };
  follow?: any;
  unfollow?: any;
}

@Injectable()
export class LineService {
  private readonly supabase: SupabaseClient;

  constructor() {
    this.supabase = supabaseService;
  }

  async handleEvent(event: LineEvent): Promise<void> {
    console.log('Handling LINE event:', event.type);

    try {
      switch (event.type) {
        case 'message':
          await this.handleMessage(event);
          break;
        case 'follow':
          await this.handleFollow(event);
          break;
        case 'unfollow':
          await this.handleUnfollow(event);
          break;
        default:
          console.log(`Unhandled event type: ${event.type}`);
      }
    } catch (error) {
      console.error('Error handling LINE event:', error.message);
    }
  }

  private async handleMessage(event: LineEvent): Promise<void> {
    if (!event.message || event.message.type !== 'text') {
      return;
    }

    const userId = event.source.userId;
    const messageText = event.message.text.toLowerCase().trim();
    const replyToken = event.replyToken;

    if (!replyToken) {
      return;
    }

    let replyMessages: LineMessage[] = [];

    switch (messageText) {
      case '‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß':
      case 'book':
      case 'booking':
        replyMessages = [
          {
            type: 'text',
            text: 'üèçÔ∏è ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏ñ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå!\n\n‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß',
          },
          LineHelper.createLiffFlexMessage(),
        ];
        break;

      case '‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞':
      case '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞':
      case 'status':
        const userBookings = await this.getUserBookings(userId);
        if (userBookings.length > 0) {
          const latestBooking = userBookings[0];
          replyMessages = [{
            type: 'text',
            text: `üìã ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n\nüÜî ‡∏£‡∏´‡∏±‡∏™‡∏à‡∏≠‡∏á: ${latestBooking.id}\nüìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${latestBooking.slotStart}\nüìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${this.getStatusText(latestBooking.status)}`,
          }];
        } else {
          replyMessages = [{
            type: 'text',
            text: 'üìã ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß\n\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß',
          }];
        }
        break;

      case 'help':
      case '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠':
      case '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á':
        replyMessages = [{
          type: 'text',
          text: 'üìñ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n\n‚Ä¢ "‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß" - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏ñ\n‚Ä¢ "‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" - ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á\n‚Ä¢ "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ\n\n‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!',
        }];
        break;

      default:
        replyMessages = [{
          type: 'text',
          text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! üëã\n\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏ñ\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ',
        }];
        break;
    }

    if (replyMessages.length > 0) {
      await LineHelper.replyMessage(replyToken, replyMessages);
    }
  }

  private async handleFollow(event: LineEvent): Promise<void> {
    const userId = event.source.userId;
    const replyToken = event.replyToken;

    console.log(`User ${userId} followed the bot`);

    if (replyToken) {
      const welcomeMessages: LineMessage[] = [
        {
          type: 'text',
          text: 'üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏ñ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå!\n\n‚ú® ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤:\n‚Ä¢ ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏ñ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå\n‚Ä¢ ‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏ó‡∏µ‡πà\n‚Ä¢ ‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤\n\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
        },
        LineHelper.createLiffFlexMessage(),
      ];

      await LineHelper.replyMessage(replyToken, welcomeMessages);
    }
  }

  private async handleUnfollow(event: LineEvent): Promise<void> {
    const userId = event.source.userId;
    console.log(`User ${userId} unfollowed the bot`);
    
    // Optionally clean up user data or log the event
  }

  private async getUserBookings(lineUserId: string): Promise<any[]> {
    const { data: user, error: userError } = await this.supabase
      .from('users')
      .select('id')
      .eq('line_user_id', lineUserId)
      .single();

    if (userError || !user) {
      return [];
    }

    const { data: bookings, error: bookingsError } = await this.supabase
      .from('bookings')
      .select('*')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false })
      .limit(5);

    if (bookingsError) {
      console.error('Failed to get user bookings:', bookingsError);
      return [];
    }

    return bookings || [];
  }

  private getStatusText(status: string): string {
    const statusTexts = {
      'HOLD_PENDING_PAYMENT': '‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
      'AWAIT_SHOP_CONFIRM': '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ',
      'CONFIRMED': '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
      'PICKUP_ASSIGNED': '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏ñ',
      'PICKED_UP': '‡∏£‡∏±‡∏ö‡∏£‡∏ñ‡πÅ‡∏•‡πâ‡∏ß',
      'IN_WASH': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏ñ',
      'READY_FOR_RETURN': '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô',
      'ON_THE_WAY_RETURN': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô',
      'COMPLETED': '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
      'REVIEWED': '‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß',
      'REJECTED': '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò',
      'HOLD_EXPIRED': '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏',
      'CANCELLED': '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß',
      'NO_SHOW': '‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡∏î',
    };

    return statusTexts[status] || status;
  }
}