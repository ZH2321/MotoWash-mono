"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LineHelper = void 0;
const axios_1 = require("axios");
const crypto = require("crypto");
const config_1 = require("./config");
class LineHelper {
    static verifySignature(body, signature) {
        const hash = crypto
            .createHmac('SHA256', config_1.config.LINE_CHANNEL_SECRET)
            .update(body, 'utf8')
            .digest('base64');
        return hash === signature;
    }
    static async getProfile(accessToken) {
        try {
            const response = await axios_1.default.get(`${this.LINE_API_BASE}/profile`, {
                headers: {
                    Authorization: `Bearer ${accessToken}`,
                },
            });
            return response.data;
        }
        catch (error) {
            throw new Error(`Failed to get LINE profile: ${error.message}`);
        }
    }
    static async pushMessage(userId, messages) {
        try {
            await axios_1.default.post(`${this.MESSAGING_API_BASE}/message/push`, {
                to: userId,
                messages,
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${config_1.config.LINE_MESSAGING_ACCESS_TOKEN}`,
                },
            });
        }
        catch (error) {
            console.error('Failed to push LINE message:', error.response?.data || error.message);
            throw new Error(`Failed to push LINE message: ${error.message}`);
        }
    }
    static async replyMessage(replyToken, messages) {
        try {
            await axios_1.default.post(`${this.MESSAGING_API_BASE}/message/reply`, {
                replyToken,
                messages,
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${config_1.config.LINE_MESSAGING_ACCESS_TOKEN}`,
                },
            });
        }
        catch (error) {
            console.error('Failed to reply LINE message:', error.response?.data || error.message);
            throw new Error(`Failed to reply LINE message: ${error.message}`);
        }
    }
    static createBookingHoldMessage(bookingId, slotStart, expiresAt) {
        return {
            type: 'text',
            text: `üéØ ‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nüìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${slotStart}\n‚è∞ ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: ${expiresAt}\nüÜî ‡∏£‡∏´‡∏±‡∏™‡∏à‡∏≠‡∏á: ${bookingId}\n\nüí≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥ 20 ‡∏ö‡∏≤‡∏ó ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î`,
        };
    }
    static createPaymentPendingMessage() {
        return {
            type: 'text',
            text: 'üìã ‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏•‡∏¥‡∏õ)\n\n‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...',
        };
    }
    static createBookingConfirmedMessage() {
        return {
            type: 'text',
            text: '‚úÖ ‡∏£‡πâ‡∏≤‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß\n\n‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ô‡∏∞‡∏Ñ‡∏∞',
        };
    }
    static createPaymentRejectedMessage(reason) {
        return {
            type: 'text',
            text: `‚ùå ‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô\n\n‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${reason}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤`,
        };
    }
    static createStatusUpdateMessage(status, statusText) {
        const statusEmojis = {
            'PICKUP_ASSIGNED': 'üèÉ‚Äç‚ôÇÔ∏è',
            'PICKED_UP': 'üöó',
            'IN_WASH': 'üßΩ',
            'READY_FOR_RETURN': '‚ú®',
            'ON_THE_WAY_RETURN': 'üöö',
            'COMPLETED': 'üéâ',
        };
        const emoji = statusEmojis[status] || 'üìã';
        return {
            type: 'text',
            text: `${emoji} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï\n\n${statusText}`,
        };
    }
    static createBookingExpiredMessage() {
        return {
            type: 'text',
            text: '‚è∞ ‡∏Ñ‡∏¥‡∏ß‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î',
        };
    }
    static createLiffFlexMessage() {
        return {
            type: 'flex',
            altText: '‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏ñ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå',
            contents: {
                type: 'bubble',
                header: {
                    type: 'box',
                    layout: 'vertical',
                    contents: [
                        {
                            type: 'text',
                            text: 'üèçÔ∏è ‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏ñ',
                            weight: 'bold',
                            size: 'xl',
                            color: '#ffffff',
                        },
                    ],
                    backgroundColor: '#3B82F6',
                    paddingAll: 'lg',
                },
                body: {
                    type: 'box',
                    layout: 'vertical',
                    contents: [
                        {
                            type: 'text',
                            text: '‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏ñ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå',
                            wrap: true,
                        },
                    ],
                },
                footer: {
                    type: 'box',
                    layout: 'vertical',
                    contents: [
                        {
                            type: 'button',
                            action: {
                                type: 'uri',
                                uri: `https://liff.line.me/${config_1.config.LIFF_AUDIENCE}`,
                                label: '‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏•‡∏¢',
                            },
                            style: 'primary',
                            color: '#3B82F6',
                        },
                    ],
                },
            },
        };
    }
}
exports.LineHelper = LineHelper;
LineHelper.LINE_API_BASE = 'https://api.line.me/v2';
LineHelper.MESSAGING_API_BASE = 'https://api.line.me/v2/bot';
//# sourceMappingURL=line.js.map