"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LineService = void 0;
const common_1 = require("@nestjs/common");
const supabase_1 = require("../db/supabase");
const line_1 = require("../common/line");
let LineService = class LineService {
    constructor() {
        this.supabase = supabase_1.supabaseService;
    }
    async handleEvent(event) {
        console.log('Handling LINE event:', event.type);
        try {
            switch (event.type) {
                case 'message':
                    await this.handleMessage(event);
                    break;
                case 'follow':
                    await this.handleFollow(event);
                    break;
                case 'unfollow':
                    await this.handleUnfollow(event);
                    break;
                default:
                    console.log(`Unhandled event type: ${event.type}`);
            }
        }
        catch (error) {
            console.error('Error handling LINE event:', error.message);
        }
    }
    async handleMessage(event) {
        if (!event.message || event.message.type !== 'text') {
            return;
        }
        const userId = event.source.userId;
        const messageText = event.message.text.toLowerCase().trim();
        const replyToken = event.replyToken;
        if (!replyToken) {
            return;
        }
        let replyMessages = [];
        switch (messageText) {
            case '‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß':
            case 'book':
            case 'booking':
                replyMessages = [
                    {
                        type: 'text',
                        text: 'üèçÔ∏è ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏ñ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå!\n\n‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß',
                    },
                    line_1.LineHelper.createLiffFlexMessage(),
                ];
                break;
            case '‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞':
            case '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞':
            case 'status':
                const userBookings = await this.getUserBookings(userId);
                if (userBookings.length > 0) {
                    const latestBooking = userBookings[0];
                    replyMessages = [{
                            type: 'text',
                            text: `üìã ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n\nüÜî ‡∏£‡∏´‡∏±‡∏™‡∏à‡∏≠‡∏á: ${latestBooking.id}\nüìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${latestBooking.slotStart}\nüìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${this.getStatusText(latestBooking.status)}`,
                        }];
                }
                else {
                    replyMessages = [{
                            type: 'text',
                            text: 'üìã ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß\n\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß',
                        }];
                }
                break;
            case 'help':
            case '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠':
            case '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á':
                replyMessages = [{
                        type: 'text',
                        text: 'üìñ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n\n‚Ä¢ "‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß" - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏ñ\n‚Ä¢ "‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" - ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á\n‚Ä¢ "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ\n\n‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!',
                    }];
                break;
            default:
                replyMessages = [{
                        type: 'text',
                        text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! üëã\n\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏ñ\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ',
                    }];
                break;
        }
        if (replyMessages.length > 0) {
            await line_1.LineHelper.replyMessage(replyToken, replyMessages);
        }
    }
    async handleFollow(event) {
        const userId = event.source.userId;
        const replyToken = event.replyToken;
        console.log(`User ${userId} followed the bot`);
        if (replyToken) {
            const welcomeMessages = [
                {
                    type: 'text',
                    text: 'üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏ñ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå!\n\n‚ú® ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤:\n‚Ä¢ ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏ñ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå\n‚Ä¢ ‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏ó‡∏µ‡πà\n‚Ä¢ ‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤\n\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
                },
                line_1.LineHelper.createLiffFlexMessage(),
            ];
            await line_1.LineHelper.replyMessage(replyToken, welcomeMessages);
        }
    }
    async handleUnfollow(event) {
        const userId = event.source.userId;
        console.log(`User ${userId} unfollowed the bot`);
    }
    async getUserBookings(lineUserId) {
        const { data: user, error: userError } = await this.supabase
            .from('users')
            .select('id')
            .eq('line_user_id', lineUserId)
            .single();
        if (userError || !user) {
            return [];
        }
        const { data: bookings, error: bookingsError } = await this.supabase
            .from('bookings')
            .select('*')
            .eq('user_id', user.id)
            .order('created_at', { ascending: false })
            .limit(5);
        if (bookingsError) {
            console.error('Failed to get user bookings:', bookingsError);
            return [];
        }
        return bookings || [];
    }
    getStatusText(status) {
        const statusTexts = {
            'HOLD_PENDING_PAYMENT': '‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
            'AWAIT_SHOP_CONFIRM': '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ',
            'CONFIRMED': '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
            'PICKUP_ASSIGNED': '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏ñ',
            'PICKED_UP': '‡∏£‡∏±‡∏ö‡∏£‡∏ñ‡πÅ‡∏•‡πâ‡∏ß',
            'IN_WASH': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏ñ',
            'READY_FOR_RETURN': '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô',
            'ON_THE_WAY_RETURN': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô',
            'COMPLETED': '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
            'REVIEWED': '‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß',
            'REJECTED': '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò',
            'HOLD_EXPIRED': '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏',
            'CANCELLED': '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß',
            'NO_SHOW': '‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡∏î',
        };
        return statusTexts[status] || status;
    }
};
exports.LineService = LineService;
exports.LineService = LineService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [])
], LineService);
//# sourceMappingURL=line.service.js.map